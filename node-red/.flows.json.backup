[
    {
        "id": "568b629767512beb",
        "type": "tab",
        "label": "broker + w0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3f98de411a14795f",
        "type": "tab",
        "label": "w1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "4f3f415805e8d135",
        "type": "group",
        "z": "568b629767512beb",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "2b7d39b31bcd80b4",
            "5675052d7f4e1ecd",
            "4729ac62b494b38b",
            "628812a184ece349"
        ],
        "x": 44,
        "y": 499,
        "w": 592,
        "h": 122
    },
    {
        "id": "b3aea270dace08fc",
        "type": "group",
        "z": "568b629767512beb",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "0dd9b61bf9852af0",
            "ed434aa36d13a3c4",
            "c4092dc29fe69a84",
            "d3dcc09aeac1257d",
            "7d5e2ed7627d093f",
            "cfca039d328602c9",
            "c97e2a7d3da4f7a7",
            "f8965512f3d939d9",
            "84920f91e5195f57",
            "ef51a20275de431a",
            "410a42736b9b60bf"
        ],
        "x": 944,
        "y": 519,
        "w": 742,
        "h": 442
    },
    {
        "id": "660b34820fc6fad2",
        "type": "group",
        "z": "568b629767512beb",
        "name": "broker",
        "style": {
            "label": true
        },
        "nodes": [
            "44a38e85ac48ecf5",
            "a86562b4d73e37a7",
            "a043cece8af6ec65",
            "917a4f04a3017a69",
            "1791b4d8eadc1bf1",
            "0e6cbbfa2380d34d",
            "0155c8a58945a0d9",
            "4a4de9207489c47b",
            "f4c164a7d0975feb",
            "9f488ec8664efcde",
            "d70c7cfd6876eacb",
            "cfabfdac98a06539"
        ],
        "x": 34,
        "y": 59,
        "w": 1502,
        "h": 282
    },
    {
        "id": "2080f36ce7985358",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control",
            "ui-switch",
            "ui-form",
            "ui-table",
            "ui-template"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "6f84b4e31dd5cbe3",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a0efbb89.5e42d8",
        "type": "redis-config",
        "name": "local",
        "options": "redis://:Yz25RAdGgkFg@redis:6379",
        "cluster": false,
        "optionsType": "str"
    },
    {
        "id": "d762fbf9ae7f207a",
        "type": "ui-page",
        "name": "Мониторинг",
        "ui": "2080f36ce7985358",
        "path": "/mon",
        "icon": "home",
        "layout": "grid",
        "theme": "6f84b4e31dd5cbe3",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 1,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d403defdfbeecc46",
        "type": "ui-group",
        "name": "Мониторинг",
        "page": "d762fbf9ae7f207a",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "09763db8f88a8d0d",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "Test task",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"task\":{\"bot_id\":\"testid\",\"cmd\":\"check\",\"params\":{\"pair\":\"BNBUSDT\",\"quantity\":0.035,\"price\":544.02,\"stopprice\":544.29}}}",
        "payloadType": "json",
        "x": 430,
        "y": 960,
        "wires": [
            [
                "84948af1aba39a62"
            ]
        ]
    },
    {
        "id": "84948af1aba39a62",
        "type": "redis-out",
        "z": "568b629767512beb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 670,
        "y": 960,
        "wires": []
    },
    {
        "id": "41ff76b137e42b28",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "Test task2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"task\":{\"bot_id\":\"testid2\",\"cmd\":\"sell_on_binance\",\"params\":{\"pair\":\"BNBUSDT\",\"quantity\":0.035,\"price\":544.02,\"stopprice\":544.29}}}",
        "payloadType": "json",
        "x": 430,
        "y": 1040,
        "wires": [
            [
                "cdec4e2f30362af6"
            ]
        ]
    },
    {
        "id": "cdec4e2f30362af6",
        "type": "redis-out",
        "z": "568b629767512beb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 670,
        "y": 1040,
        "wires": []
    },
    {
        "id": "7061e722720929e2",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "init test data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1750,
        "y": 240,
        "wires": [
            [
                "cc134211cabcae1d"
            ]
        ]
    },
    {
        "id": "cc134211cabcae1d",
        "type": "function",
        "z": "568b629767512beb",
        "name": "redis.set    testid",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\nlet test_data = {};\ntest_data.id = \"bots:testid:data\";\ntest_data.somearr = [0,1,2];\ntest_data.someobj = {q:[0,1,2], \"bool\":true};\n\n\n// Регистрируем воркера\n(async () => await redis.set(test_data.id, JSON.stringify(test_data)))();\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "760867d2369ea4a1",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "init test data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1750,
        "y": 300,
        "wires": [
            [
                "0fac8e94e1e2b310"
            ]
        ]
    },
    {
        "id": "0fac8e94e1e2b310",
        "type": "function",
        "z": "568b629767512beb",
        "name": "redis.set   testid2",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\nlet test_data = {};\ntest_data.id = \"bots:testid2:data\";\ntest_data.somearr = [0,1,2];\ntest_data.someobj = {q:[0,1,2], \"bool\":true};\n\n\n// Регистрируем воркера\n(async () => await redis.set(test_data.id, JSON.stringify(test_data)))();\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "0dd9b61bf9852af0",
        "type": "inject",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "Init Worker 1",
        "props": [
            {
                "p": "payload",
                "v": "true",
                "t": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1060,
        "y": 560,
        "wires": [
            [
                "c4092dc29fe69a84"
            ]
        ]
    },
    {
        "id": "ed434aa36d13a3c4",
        "type": "redis-in",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "job",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 1020,
        "y": 800,
        "wires": [
            [
                "cfca039d328602c9"
            ]
        ]
    },
    {
        "id": "c4092dc29fe69a84",
        "type": "function",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "Worker 1: Init",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// Используем context.flow для получения ID воркера, если он уже существует, иначе генерируем новый\nconst workerId = context.flow.get('workerId') || 'worker:' + RED.util.generateId();\ncontext.flow.set('workerId', workerId);\n\n// Регистрируем воркера\n(async () => await redis.set(workerId, 1))();\nnode.status({fill:\"green\",shape:\"dot\",text:\"Воркер запущен:\" + workerId});\n\nmsg.workerID = workerId;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "d3dcc09aeac1257d",
        "type": "redis-out",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 1340,
        "y": 920,
        "wires": []
    },
    {
        "id": "7d5e2ed7627d093f",
        "type": "switch",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "task.cmd",
        "property": "payload.task.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_on_binance",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1330,
        "y": 800,
        "wires": [
            [
                "ef51a20275de431a"
            ],
            [
                "410a42736b9b60bf"
            ],
            [
                "410a42736b9b60bf"
            ]
        ]
    },
    {
        "id": "cfca039d328602c9",
        "type": "switch",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "workerId",
        "property": "payload.workerId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "workerId",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1170,
        "y": 800,
        "wires": [
            [
                "7d5e2ed7627d093f"
            ]
        ]
    },
    {
        "id": "c97e2a7d3da4f7a7",
        "type": "function",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "msg.topic = \"fjob\"",
        "func": " msg.topic = \"fjob\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 920,
        "wires": [
            [
                "d3dcc09aeac1257d"
            ]
        ]
    },
    {
        "id": "f8965512f3d939d9",
        "type": "link in",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "link in 3",
        "links": [
            "84920f91e5195f57",
            "410a42736b9b60bf"
        ],
        "x": 1015,
        "y": 920,
        "wires": [
            [
                "c97e2a7d3da4f7a7"
            ]
        ]
    },
    {
        "id": "84920f91e5195f57",
        "type": "link out",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "link out 29",
        "mode": "link",
        "links": [
            "f8965512f3d939d9"
        ],
        "x": 1645,
        "y": 720,
        "wires": []
    },
    {
        "id": "ef51a20275de431a",
        "type": "function",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "count + 1",
        "func": "msg.payload.bot.count = msg.payload.bot.count + 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 720,
        "wires": [
            [
                "84920f91e5195f57"
            ]
        ]
    },
    {
        "id": "945ac6b3b445aaa0",
        "type": "redis-instance",
        "z": "568b629767512beb",
        "server": "a0efbb89.5e42d8",
        "name": "",
        "topic": "redis",
        "location": "global",
        "x": 1720,
        "y": 160,
        "wires": []
    },
    {
        "id": "44b5186c49bc7040",
        "type": "function",
        "z": "568b629767512beb",
        "name": "getBotDifferences",
        "func": "function getBotDifferences(bot, botStart, ignorePaths = []) {\n    const ignoreSet = new Set(ignorePaths);\n\n    function compareObjects(a, b, differences = {}, path = []) {\n        const allKeys = new Set([...Object.keys(a), ...Object.keys(b)]);\n        allKeys.forEach(key => {\n            const currentPath = [...path, key];\n            const pathString = currentPath.join('.');\n\n            if (ignoreSet.has(pathString)) return;\n\n            const aVal = a[key];\n            const bVal = b[key];\n\n            if (typeof aVal === 'object' && aVal !== null && typeof bVal === 'object' && bVal !== null) {\n                compareObjects(aVal, bVal, differences, currentPath);\n            } else if (Array.isArray(aVal) && Array.isArray(bVal)) {\n                if (JSON.stringify(aVal) !== JSON.stringify(bVal)) {\n                    differences[key] = { old: bVal, new: aVal };\n                }\n            } else if (aVal !== bVal) {\n                differences[key] = { old: bVal, new: aVal };\n            }\n        });\n        return differences;\n    }\n\n    return compareObjects(bot, botStart);\n}\n\nglobal.set('getBotDifferences', getBotDifferences);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1990,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e977403f092789ec",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "init functions",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1750,
        "y": 80,
        "wires": [
            [
                "44b5186c49bc7040",
                "7b090a91eb9bd32d"
            ]
        ]
    },
    {
        "id": "44a38e85ac48ecf5",
        "type": "inject",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 100,
        "wires": [
            [
                "a043cece8af6ec65"
            ]
        ]
    },
    {
        "id": "a86562b4d73e37a7",
        "type": "ui-chart",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "group": "d403defdfbeecc46",
        "name": "Кол-во задач в очереди",
        "label": "Кол-во задач в очереди",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1370,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a043cece8af6ec65",
        "type": "function",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "name": "Broker: Check Tasks and Workers",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\nconst config = context.global.get('config');\n\n// ==== Функция проверки, занят ли бот ====\nasync function isBotBusy(botId) {\n    try {\n        let value = await redis.get(config.redis.botLockPrefix + botId);\n        return value !== null;\n    } catch (err) {\n        node.error(`Ошибка при проверке занятости бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция проверки, занят ли воркер ====\nasync function isWorkerBusy(workerId) {\n    try {\n        let value = await redis.get(config.redis.workerLockPrefix + workerId);\n        return value !== null;\n    } catch (err) {\n        node.error(`Ошибка при проверке занятости воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция блокировки бота ====\nasync function lockBot(botId) {\n    try {\n        await redis.set(config.redis.botLockPrefix + botId, 1, 'EX', config.lockTTL);\n        node.log(`Бот ${botId} заблокирован на ${config.lockTTL} секунд.`);\n    } catch (err) {\n        node.error(`Ошибка при блокировке бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция блокировки воркера ====\nasync function lockWorker(workerId) {\n    try {\n        await redis.set(config.redis.workerLockPrefix + workerId, 1, 'EX', config.lockTTL);\n        node.log(`Воркер ${workerId} заблокирован на ${config.lockTTL} секунд.`);\n    } catch (err) {\n        node.error(`Ошибка при блокировке воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция получения свободного воркера ====\nasync function getFreeWorker() {\n    try {\n        let cursor = '0';\n        do {\n            const result = await redis.scan(cursor, 'MATCH', 'worker:*');\n            cursor = result[0];\n            const workers = result[1];\n            for (const worker of workers) {\n                const isBusy = await isWorkerBusy(worker);\n                if (!isBusy) {\n                    return worker;\n                }\n            }\n        } while (cursor !== '0');\n        return null;\n    } catch (err) {\n        node.error('Ошибка при выборе воркера:', err);\n        throw err;\n    }\n}\n\n// ==== Логика брокера ====\n(async () => {\n    try {\n        const currentTime = Date.now();\n\n        // Проверка времени выполнения активных задач\n        let cursor = '0';\n        do {\n            const result = await redis.scan(cursor, 'MATCH', `${config.redis.activeTasksPrefix}*`);\n            cursor = result[0];\n            const activeTasks = result[1];\n\n            for (const taskKey of activeTasks) {\n                const taskInfo = await redis.get(taskKey);\n                if (taskInfo) {\n                    const task = JSON.parse(taskInfo);\n                    const elapsedTime = currentTime - task.startTime;\n\n                    if (elapsedTime > config.taskTimeout * 1000) {\n                        node.warn(`Задача ${taskKey} не завершена в течение ${config.taskTimeout} секунд.`);\n                        await redis.del(taskKey);\n                        node.send([null, { error: `Задача ${taskKey} не завершена в течение ${config.taskTimeout} секунд.`, task: task }]);\n                    }\n                }\n            }\n        } while (cursor !== '0');\n\n        // Обработка задач из очереди\n        while (true) {\n            let taskData = await redis.lpop(config.redis.taskQueueName);\n\n            if (!taskData) {\n                break;\n            }\n\n            let task;\n            try {\n                task = JSON.parse(taskData);\n            } catch (err) {\n                node.error('Ошибка при парсинге задачи:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                continue;\n            }\n\n            if (!task.task || !task.task.bot_id || !task.task.cmd) {\n                node.warn('Некорректная задача: отсутствуют обязательные поля.');\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                continue;\n            }\n\n            let botData;\n            try {\n                botData = await redis.get(`bots:${task.task.bot_id}:data`);\n                if (botData) {\n                    task.bot = JSON.parse(botData);\n                    task.bot_start = task.bot;\n                } else {\n                    node.warn(`Данные бота ${task.task.bot_id} не найдены в Redis.`);\n                    await redis.rpush(config.redis.taskQueueName, taskData);\n                    continue;\n                }\n            } catch (err) {\n                node.error('Ошибка при получении данных бота:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                continue;\n            }\n\n            const shouldLockBot = !config.noLockCommands.includes(task.task.cmd);\n\n            if (shouldLockBot) {\n                try {\n                    const isBotBusyb = await isBotBusy(task.task.bot_id);\n                    if (isBotBusyb) {\n                        node.warn(`Бот ${task.task.bot_id} занят. Возвращаем задачу в очередь.`);\n                        await redis.rpush(config.redis.taskQueueName, taskData);\n                        continue;\n                    }\n                } catch (err) {\n                    node.error('Ошибка при проверке занятости бота:', err);\n                    await redis.rpush(config.redis.taskQueueName, taskData);\n                    continue;\n                }\n            }\n\n            let workerId;\n            try {\n                workerId = await getFreeWorker();\n                if (!workerId) {\n                    node.warn('Нет доступных воркеров. Возвращаем задачу в очередь.');\n                    await redis.rpush(config.redis.taskQueueName, taskData);\n                    continue;\n                }\n            } catch (err) {\n                node.error('Ошибка при выборе воркера:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                continue;\n            }\n\n            if (shouldLockBot) {\n                try {\n                    await lockBot(task.task.bot_id);\n                } catch (err) {\n                    node.error('Ошибка при блокировке бота:', err);\n                    await redis.rpush(config.redis.taskQueueName, taskData);\n                    continue;\n                }\n            }\n\n            try {\n                await lockWorker(workerId);\n            } catch (err) {\n                node.error('Ошибка при блокировке воркера:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                continue;\n            }\n\n            task.workerId = workerId;\n            task.startTime = currentTime;\n\n            // Сохраняем задачу как активную\n            const taskKey = `${config.redis.activeTasksPrefix}${workerId}:${task.task.bot_id}:${task.task.cmd}`;\n            await redis.set(taskKey, JSON.stringify(task), 'EX', config.taskTimeout);\n\n            try {\n                await redis.publish(config.redis.jobChannel, JSON.stringify(task));\n            } catch (err) {\n                node.error('Ошибка при отправке задачи воркеру:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData);\n                continue;\n            }\n\n            let queueLength = await redis.llen(config.redis.taskQueueName);\n            msg.payload = queueLength;\n            node.send(msg);\n        }\n    } catch (err) {\n        node.error(\"Ошибка в логике брокера: \" + err);\n    }\n})();\n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 160,
        "wires": [
            [
                "a86562b4d73e37a7"
            ],
            [
                "917a4f04a3017a69",
                "a86562b4d73e37a7"
            ]
        ]
    },
    {
        "id": "917a4f04a3017a69",
        "type": "debug",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "name": "debug 69",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1300,
        "y": 200,
        "wires": []
    },
    {
        "id": "1791b4d8eadc1bf1",
        "type": "function",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "name": "Broker: Analyse Results",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\nconst config = context.global.get('config');\nconst getBotDifferences = global.get('getBotDifferences');\n\n// ==== Функция разблокировки воркера ====\nasync function unlockWorker(workerId) {\n    try {\n        await redis.del(config.redis.workerLockPrefix + workerId);\n        node.log(`Воркер ${workerId} разблокирован.`);\n    } catch (err) {\n        node.error(`Ошибка при разблокировке воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция разблокировки бота ====\nasync function unlockBot(botId) {\n    try {\n        await redis.del(config.redis.botLockPrefix + botId);\n        node.log(`Бот ${botId} разблокирован.`);\n    } catch (err) {\n        node.error(`Ошибка при разблокировке бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Логика анализа результатов ====\n(async () => {\n    try {\n        const msg2 = msg.payload;\n\n        // Выполняем анализ:\n        const changes = getBotDifferences(msg2.bot, msg2.bot_start);\n        msg.changes = changes;\n        node.log(`Изменения в данных ${JSON.stringify(changes, null, 2)}`);\n\n        const finishTime = Date.now();\n        let durationJob = finishTime - msg2.startTime;\n        let topickey = msg2.workerId + ' - ' + msg2.task.bot_id + ' - ' + msg2.task.cmd;\n        msg.topic = topickey;\n        msg.payload = durationJob;\n\n        // Удаляем задачу из активных\n        const taskKey = `${config.redis.activeTasksPrefix}${msg2.workerId}:${msg2.task.bot_id}:${msg2.task.cmd}`;\n        await redis.del(taskKey);\n        node.log(`Задача ${taskKey} завершена успешно.`);\n\n        // Разблокируем воркера\n        await unlockWorker(msg2.workerId);\n\n        // Разблокируем бота, если команда требует блокировки\n        if (!config.noLockCommands.includes(msg2.task.cmd)) {\n            await redis.set(`bots:${msg2.task.bot_id}:data`, JSON.stringify(msg2.bot));\n            await unlockBot(msg2.task.bot_id);\n        }\n\n        node.send(msg);\n    } catch (err) {\n        node.error(\"Ошибка при анализе результатов: \" + err);\n    }\n})();\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "0155c8a58945a0d9"
            ]
        ]
    },
    {
        "id": "0e6cbbfa2380d34d",
        "type": "redis-in",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "fjob",
        "topic": "fjob",
        "obj": true,
        "timeout": 0,
        "x": 810,
        "y": 300,
        "wires": [
            [
                "1791b4d8eadc1bf1"
            ]
        ]
    },
    {
        "id": "0155c8a58945a0d9",
        "type": "ui-chart",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "group": "d403defdfbeecc46",
        "name": "Время выполнения задач",
        "label": "Время выполнения задач",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 1390,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "7b090a91eb9bd32d",
        "type": "function",
        "z": "568b629767512beb",
        "name": "config",
        "func": "// ==== Инициализация конфигурации ====\nconst config = {\n    redis: {\n        taskQueueName: 'new_tasks',\n        jobChannel: 'job',\n        returnChannel: 'return_channel',\n        botLockPrefix: 'bot_lock:',\n        workerLockPrefix: 'worker_lock:',\n        activeTasksPrefix: 'active_task:',\n    },\n    noLockCommands: ['sell_on_binance', 'cancel_on_binance'],\n    lockTTL: 5,\n    maxTasksPerRun: 10,\n    taskTimeout: 5,\n    enableLogging: true,\n};\n\n// Сохраняем конфигурацию в глобальный контекст\ncontext.global.set('config', config);\n\n// Возвращаем сообщение без изменений\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1950,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "2b7d39b31bcd80b4",
        "type": "inject",
        "z": "568b629767512beb",
        "g": "4f3f415805e8d135",
        "name": " stop",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 560,
        "y": 540,
        "wires": [
            [
                "5675052d7f4e1ecd"
            ]
        ]
    },
    {
        "id": "5675052d7f4e1ecd",
        "type": "redis-out",
        "z": "568b629767512beb",
        "g": "4f3f415805e8d135",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "stop",
        "obj": false,
        "x": 560,
        "y": 580,
        "wires": []
    },
    {
        "id": "4729ac62b494b38b",
        "type": "inject",
        "z": "568b629767512beb",
        "g": "4f3f415805e8d135",
        "name": "start",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "628812a184ece349"
            ]
        ]
    },
    {
        "id": "628812a184ece349",
        "type": "redis-out",
        "z": "568b629767512beb",
        "g": "4f3f415805e8d135",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "start",
        "obj": false,
        "x": 140,
        "y": 580,
        "wires": []
    },
    {
        "id": "4a4de9207489c47b",
        "type": "trigger",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 460,
        "y": 160,
        "wires": [
            [
                "a043cece8af6ec65"
            ]
        ]
    },
    {
        "id": "f4c164a7d0975feb",
        "type": "delay",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "name": "",
        "pauseType": "delay",
        "timeout": "100",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 250,
        "y": 160,
        "wires": [
            [
                "4a4de9207489c47b"
            ]
        ]
    },
    {
        "id": "9f488ec8664efcde",
        "type": "redis-in",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "start",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 160,
        "wires": [
            [
                "f4c164a7d0975feb"
            ]
        ]
    },
    {
        "id": "d70c7cfd6876eacb",
        "type": "redis-in",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "stop",
        "obj": true,
        "timeout": 0,
        "x": 110,
        "y": 220,
        "wires": [
            [
                "cfabfdac98a06539"
            ]
        ]
    },
    {
        "id": "cfabfdac98a06539",
        "type": "function",
        "z": "568b629767512beb",
        "g": "660b34820fc6fad2",
        "name": "stop",
        "func": "msg.reset = true;\nmsg.payload = \"\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 220,
        "wires": [
            [
                "4a4de9207489c47b"
            ]
        ]
    },
    {
        "id": "410a42736b9b60bf",
        "type": "link out",
        "z": "568b629767512beb",
        "g": "b3aea270dace08fc",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "f8965512f3d939d9"
        ],
        "x": 1535,
        "y": 800,
        "wires": []
    },
    {
        "id": "ee977f0676562b21",
        "type": "inject",
        "z": "3f98de411a14795f",
        "name": "Init Worker ",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "true",
        "payloadType": "str",
        "x": 210,
        "y": 100,
        "wires": [
            [
                "53ee5c1bb9ac5c7c"
            ]
        ]
    },
    {
        "id": "74fd2485648ef35f",
        "type": "redis-in",
        "z": "3f98de411a14795f",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "job",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 190,
        "y": 500,
        "wires": [
            [
                "393425648f5da403"
            ]
        ]
    },
    {
        "id": "53ee5c1bb9ac5c7c",
        "type": "function",
        "z": "3f98de411a14795f",
        "name": "Worker : Init",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// Используем context.flow для получения ID воркера, если он уже существует, иначе генерируем новый\nconst workerId = context.flow.get('workerId') || 'worker:' + RED.util.generateId();\ncontext.flow.set('workerId', workerId);\n\n// Регистрируем воркера\n(async () => await redis.set(workerId, 1))();\nnode.status({fill:\"green\",shape:\"dot\",text:\"Воркер запущен:\" + workerId});\n\nmsg.workerID = workerId;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "77322bcd7a0151ad",
        "type": "redis-out",
        "z": "3f98de411a14795f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 1010,
        "y": 200,
        "wires": []
    },
    {
        "id": "f1977b420063071d",
        "type": "switch",
        "z": "3f98de411a14795f",
        "name": "task.cmd",
        "property": "payload.task.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "check",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "sell_on_binance",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 500,
        "y": 500,
        "wires": [
            [
                "bf8b8fc38d4aed63"
            ],
            [
                "b4fc45cb56bd8409"
            ],
            [
                "b4fc45cb56bd8409"
            ]
        ]
    },
    {
        "id": "393425648f5da403",
        "type": "switch",
        "z": "3f98de411a14795f",
        "name": "workerId",
        "property": "payload.workerId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "workerId",
                "vt": "flow"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 340,
        "y": 500,
        "wires": [
            [
                "f1977b420063071d"
            ]
        ]
    },
    {
        "id": "4970669a0e9cf487",
        "type": "function",
        "z": "3f98de411a14795f",
        "name": "msg.topic = \"fjob\"",
        "func": " msg.topic = \"fjob\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 200,
        "wires": [
            [
                "77322bcd7a0151ad"
            ]
        ]
    },
    {
        "id": "e8aee682ddbe8c4b",
        "type": "link in",
        "z": "3f98de411a14795f",
        "name": "link in 1",
        "links": [
            "7bdddc1be54a9489",
            "b4fc45cb56bd8409"
        ],
        "x": 685,
        "y": 200,
        "wires": [
            [
                "4970669a0e9cf487"
            ]
        ]
    },
    {
        "id": "7bdddc1be54a9489",
        "type": "link out",
        "z": "3f98de411a14795f",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "e8aee682ddbe8c4b"
        ],
        "x": 865,
        "y": 420,
        "wires": []
    },
    {
        "id": "bf8b8fc38d4aed63",
        "type": "function",
        "z": "3f98de411a14795f",
        "name": "count + 1",
        "func": "msg.payload.bot.count = msg.payload.bot.count + 1;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 420,
        "wires": [
            [
                "7bdddc1be54a9489"
            ]
        ]
    },
    {
        "id": "b4fc45cb56bd8409",
        "type": "link out",
        "z": "3f98de411a14795f",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "e8aee682ddbe8c4b"
        ],
        "x": 705,
        "y": 500,
        "wires": []
    }
]