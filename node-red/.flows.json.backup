[
    {
        "id": "568b629767512beb",
        "type": "tab",
        "label": "Main",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "3f98de411a14795f",
        "type": "tab",
        "label": "w0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "20ab889ce2631bfa",
        "type": "tab",
        "label": "settings",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "98132085df5d6410",
        "type": "group",
        "z": "568b629767512beb",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "4fa9d878be1d41c4",
            "18eb79254fcfcd07",
            "65cd5b44329acb2e",
            "21af50813565584d",
            "607b98142d4cc63b",
            "49c40644aa9fa132",
            "386ca7e8c7e67c3b",
            "0e83c0fd6d981286"
        ],
        "x": 174,
        "y": 499,
        "w": 772,
        "h": 242
    },
    {
        "id": "d4c174739de217d4",
        "type": "group",
        "z": "3f98de411a14795f",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "f3987b323a93c5c3",
            "d2e16916844ef8c6",
            "aee5dc394e1301d4",
            "94015585f348d9c3",
            "606463e04b70cf07",
            "c3283ee72a5a301c",
            "28974da5b4417212",
            "01a180c0b0f2225d"
        ],
        "x": 254,
        "y": 99,
        "w": 732,
        "h": 242
    },
    {
        "id": "c34bda795978de35",
        "type": "group",
        "z": "568b629767512beb",
        "style": {
            "stroke": "#2e333a",
            "stroke-opacity": "1",
            "fill": "#383c45",
            "fill-opacity": "0.5",
            "label": true,
            "label-position": "nw",
            "color": "#dddddd"
        },
        "nodes": [
            "162b94472306b1a9",
            "c8fbde1a7dcb152b",
            "ec7e1d976fe04766",
            "83ec644475f3fbd2",
            "722cfd9a35127689",
            "43389ead78d0f309",
            "11440855fb0d494d",
            "70a01627a8dbffef",
            "bde84900c30b397d"
        ],
        "x": 174,
        "y": 59,
        "w": 812,
        "h": 302
    },
    {
        "id": "2080f36ce7985358",
        "type": "ui-base",
        "name": "My Dashboard",
        "path": "/dashboard",
        "appIcon": "",
        "includeClientData": true,
        "acceptsClientConfig": [
            "ui-notification",
            "ui-control",
            "ui-switch",
            "ui-form",
            "ui-table",
            "ui-template"
        ],
        "showPathInSidebar": false,
        "navigationStyle": "default",
        "titleBarStyle": "default",
        "showReconnectNotification": true,
        "notificationDisplayTime": 1,
        "showDisconnectNotification": true
    },
    {
        "id": "6f84b4e31dd5cbe3",
        "type": "ui-theme",
        "name": "Default Theme",
        "colors": {
            "surface": "#ffffff",
            "primary": "#0094CE",
            "bgPage": "#eeeeee",
            "groupBg": "#ffffff",
            "groupOutline": "#cccccc"
        },
        "sizes": {
            "density": "default",
            "pagePadding": "12px",
            "groupGap": "12px",
            "groupBorderRadius": "4px",
            "widgetGap": "12px"
        }
    },
    {
        "id": "a0efbb89.5e42d8",
        "type": "redis-config",
        "name": "local",
        "options": "redis://:Yz25RAdGgkFg@redis:6379",
        "cluster": false,
        "optionsType": "str"
    },
    {
        "id": "d762fbf9ae7f207a",
        "type": "ui-page",
        "name": "Мониторинг",
        "ui": "2080f36ce7985358",
        "path": "/mon",
        "icon": "home",
        "layout": "grid",
        "theme": "6f84b4e31dd5cbe3",
        "breakpoints": [
            {
                "name": "Default",
                "px": "0",
                "cols": "3"
            },
            {
                "name": "Tablet",
                "px": "576",
                "cols": "6"
            },
            {
                "name": "Small Desktop",
                "px": "768",
                "cols": "9"
            },
            {
                "name": "Desktop",
                "px": "1024",
                "cols": "12"
            }
        ],
        "order": 2,
        "className": "",
        "visible": "true",
        "disabled": "false"
    },
    {
        "id": "d403defdfbeecc46",
        "type": "ui-group",
        "name": "Мониторинг",
        "page": "d762fbf9ae7f207a",
        "width": 6,
        "height": 1,
        "order": 1,
        "showTitle": true,
        "className": "",
        "visible": "true",
        "disabled": "false",
        "groupType": "default"
    },
    {
        "id": "162b94472306b1a9",
        "type": "inject",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "name": "Broker Timer",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": ".5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "c8fbde1a7dcb152b"
            ]
        ]
    },
    {
        "id": "c8fbde1a7dcb152b",
        "type": "function",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "name": "Broker: Check Tasks and Workers",
        "func": "// ==== Конфигурация ====\nconst config = {\n    redis: {\n        taskQueueName: 'new_tasks',\n        jobChannel: 'job',\n        botLockPrefix: 'bot_lock:',\n        workerLockPrefix: 'worker_lock:',\n    },\n    noLockCommands: ['sell_on_binance', 'cancel_on_binance'],\n    lockTTL: 5, // Время жизни блокировки в секундах\n    maxTasksPerRun: 10 // Максимальное количество задач для обработки за один запуск\n};\n\n// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// ==== Функция проверки, занят ли бот ====\nasync function isBotBusy(botId) {\n    try {\n        let value = await redis.get(config.redis.botLockPrefix + botId);\n        return value !== null;\n    } catch (err) {\n        node.error(`Ошибка при проверке занятости бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция проверки, занят ли воркер ====\nasync function isWorkerBusy(workerId) {\n    try {\n        let value = await redis.get(config.redis.workerLockPrefix + workerId);\n        return value !== null;\n    } catch (err) {\n        node.error(`Ошибка при проверке занятости воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция блокировки бота ====\nasync function lockBot(botId) {\n    try {\n        await redis.set(config.redis.botLockPrefix + botId, 1, 'EX', config.lockTTL);\n        node.log(`Бот ${botId} заблокирован на ${config.lockTTL} секунд.`);\n    } catch (err) {\n        node.error(`Ошибка при блокировке бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция блокировки воркера ====\nasync function lockWorker(workerId) {\n    try {\n        await redis.set(config.redis.workerLockPrefix + workerId, 1, 'EX', config.lockTTL);\n        node.log(`Воркер ${workerId} заблокирован на ${config.lockTTL} секунд.`);\n    } catch (err) {\n        node.error(`Ошибка при блокировке воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция получения свободного воркера ====\nasync function getFreeWorker() {\n    try {\n        // Получаем список всех воркеров\n        const workers = await redis.keys('worker:*');\n\n        // Ищем первого свободного воркера\n        for (const worker of workers) {\n            const isBusy = await isWorkerBusy(worker);\n            if (!isBusy) {\n                return worker; // Возвращаем первого свободного воркера\n            }\n        }\n\n        // Если все воркеры заняты, возвращаем null\n        return null;\n    } catch (err) {\n        node.error('Ошибка при выборе воркера:', err);\n        throw err;\n    }\n}\n\n// ==== Логика брокера ====\n(async () => {\n    try {\n        // Обрабатываем до maxTasksPerRun задач за один запуск\n        for (let i = 0; i < config.maxTasksPerRun; i++) {\n            // 1. Получаем задачу из очереди\n            let taskData = await redis.lpop(config.redis.taskQueueName);\n\n            if (!taskData) {\n                node.log('Очередь задач пуста.');\n                break; // Выходим из цикла, если очередь пуста\n            }\n\n            let task;\n            try {\n                task = JSON.parse(taskData);\n            } catch (err) {\n                node.error('Ошибка при парсинге задачи:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                continue; // Переходим к следующей задаче\n            }\n\n            // 2. Валидация задачи\n            if (!task.task || !task.task.bot_id || !task.task.cmd) {\n                node.warn('Некорректная задача: отсутствуют обязательные поля.');\n                await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                continue; // Переходим к следующей задаче\n            }\n\n            // 3. Получаем данные бота из Redis\n            let botData;\n            try {\n                botData = await redis.get(`bots:${task.task.bot_id}:data`);\n                if (botData) {\n                    task.bot_data = JSON.parse(botData);\n                } else {\n                    node.warn(`Данные бота ${task.task.bot_id} не найдены в Redis.`);\n                    await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                    continue; // Переходим к следующей задаче\n                }\n            } catch (err) {\n                node.error('Ошибка при получении данных бота:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                continue; // Переходим к следующей задаче\n            }\n\n            // 4. Проверяем, нужно ли блокировать бота\n            const shouldLockBot = !config.noLockCommands.includes(task.task.cmd);\n\n            // 5. Если блокировка бота требуется, проверяем, свободен ли бот\n            if (shouldLockBot) {\n                try {\n                    const isBotBusyb = await isBotBusy(task.task.bot_id);\n                    if (isBotBusyb) {\n                        node.warn(`Бот ${task.task.bot_id} занят. Возвращаем задачу в очередь.`);\n                        await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                        continue; // Переходим к следующей задаче\n                    }\n                } catch (err) {\n                    node.error('Ошибка при проверке занятости бота:', err);\n                    await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                    continue; // Переходим к следующей задаче\n                }\n            }\n\n            // 6. Получаем свободного воркера\n            let workerId;\n            try {\n                workerId = await getFreeWorker();\n                if (!workerId) {\n                    node.warn('Нет доступных воркеров. Возвращаем задачу в очередь.');\n                    await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                    continue; // Переходим к следующей задаче\n                }\n            } catch (err) {\n                node.error('Ошибка при выборе воркера:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                continue; // Переходим к следующей задаче\n            }\n\n            // 7. Если блокировка бота требуется, блокируем бота\n            if (shouldLockBot) {\n                try {\n                    await lockBot(task.task.bot_id);\n                } catch (err) {\n                    node.error('Ошибка при блокировке бота:', err);\n                    await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                    continue; // Переходим к следующей задаче\n                }\n            }\n\n            // 8. Блокируем воркера\n            try {\n                await lockWorker(workerId);\n            } catch (err) {\n                node.error('Ошибка при блокировке воркера:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                continue; // Переходим к следующей задаче\n            }\n\n            // 9. Отправляем задачу воркеру\n            task.workerId = workerId;\n            task.startTime = Date.now();\n            try {\n                await redis.publish(config.redis.jobChannel, JSON.stringify(task));\n                node.log(`Задача ${task.task.cmd} отправлена воркеру ${workerId}`);\n            } catch (err) {\n                node.error('Ошибка при отправке задачи воркеру:', err);\n                await redis.rpush(config.redis.taskQueueName, taskData); // Возвращаем задачу в очередь\n                continue; // Переходим к следующей задаче\n            }\n\n            // 10. Получаем количество задач в очереди\n            try {\n                let queueLength = await redis.llen(config.redis.taskQueueName);\n                msg.payload = queueLength;\n                node.send(msg);\n            } catch (err) {\n                node.error('Ошибка при получении длины очереди:', err);\n                continue; // Переходим к следующей задаче\n            }\n        }\n    } catch (err) {\n        node.error(\"Ошибка в логике брокера: \", err);\n    }\n})();",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 120,
        "wires": [
            [
                "11440855fb0d494d"
            ],
            [
                "bde84900c30b397d"
            ]
        ]
    },
    {
        "id": "ec7e1d976fe04766",
        "type": "function",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "name": "Broker: Analyse Results",
        "func": "// ==== Конфигурация ====\nconst config = {\n    redis: {\n        botLockPrefix: 'bot_lock:',\n        workerLockPrefix: 'worker_lock:',\n    },\n    noLockCommands: ['sell_on_binance', 'cancel_on_binance'],\n};\n\n// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// ==== Функция разблокировки воркера ====\nasync function unlockWorker(workerId) {\n    try {\n        await redis.del(config.redis.workerLockPrefix + workerId);\n        node.log(`Воркер ${workerId} разблокирован.`);\n    } catch (err) {\n        node.error(`Ошибка при разблокировке воркера ${workerId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Функция разблокировки бота ====\nasync function unlockBot(botId) {\n    try {\n        await redis.del(config.redis.botLockPrefix + botId);\n        node.log(`Бот ${botId} разблокирован.`);\n    } catch (err) {\n        node.error(`Ошибка при разблокировке бота ${botId}:`, err);\n        throw err;\n    }\n}\n\n// ==== Логика анализа результатов ====\n(async () => {\n    try {\n        const msg2 = msg.payload;\n\n        //Выполняем анализ:\n        const finishTime = Date.now();\n        let durationJob = finishTime - msg2.startTime;\n        let topickey = msg.payload.workerId + msg.payload.bot_id;\n        msg.topic = topickey;\n        msg.payload = durationJob;\n\n        // Разблокируем воркера\n        await unlockWorker(msg2.workerId);\n\n        // Разблокируем бота, если команда требует блокировки\n        if (!config.noLockCommands.includes(msg2.task.cmd)) {\n            await unlockBot(msg2.bot_id);\n        }\n\n        node.send(msg);\n    } catch (err) {\n        node.error(\"Ошибка при анализе результатов: \" + err);\n        return [null, { error: 'Ошибка при анализе результатов', details: err }];\n    }\n})();",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 320,
        "wires": [
            [
                "43389ead78d0f309",
                "70a01627a8dbffef"
            ]
        ]
    },
    {
        "id": "83ec644475f3fbd2",
        "type": "redis-in",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "fjob",
        "topic": "fjob",
        "obj": true,
        "timeout": 0,
        "x": 260,
        "y": 300,
        "wires": [
            [
                "ec7e1d976fe04766",
                "722cfd9a35127689"
            ]
        ]
    },
    {
        "id": "722cfd9a35127689",
        "type": "debug",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "name": "debug 58",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 280,
        "wires": []
    },
    {
        "id": "43389ead78d0f309",
        "type": "ui-chart",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "group": "d403defdfbeecc46",
        "name": "Время выполнения задач",
        "label": "Время выполнения задач",
        "order": 1,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": true,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 740,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "11440855fb0d494d",
        "type": "ui-chart",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "group": "d403defdfbeecc46",
        "name": "Кол-во задач в очереди",
        "label": "Кол-во задач в очереди",
        "order": 2,
        "chartType": "line",
        "category": "topic",
        "categoryType": "msg",
        "xAxisLabel": "",
        "xAxisProperty": "",
        "xAxisPropertyType": "timestamp",
        "xAxisType": "time",
        "xAxisFormat": "",
        "xAxisFormatType": "auto",
        "xmin": "",
        "xmax": "",
        "yAxisLabel": "",
        "yAxisProperty": "payload",
        "yAxisPropertyType": "msg",
        "ymin": "",
        "ymax": "",
        "bins": 10,
        "action": "append",
        "stackSeries": false,
        "pointShape": "circle",
        "pointRadius": "2",
        "showLegend": false,
        "removeOlder": 1,
        "removeOlderUnit": "60",
        "removeOlderPoints": "",
        "colors": [
            "#0095ff",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#a347e1",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "textColor": [
            "#666666"
        ],
        "textColorDefault": true,
        "gridColor": [
            "#e5e5e5"
        ],
        "gridColorDefault": true,
        "width": 6,
        "height": 8,
        "className": "",
        "interpolation": "linear",
        "x": 850,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "70a01627a8dbffef",
        "type": "debug",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "name": "debug 63",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 280,
        "wires": []
    },
    {
        "id": "09763db8f88a8d0d",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "Test task",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"task\":{\"bot_id\":\"testid\",\"cmd\":\"sell_on_binance\",\"params\":{\"pair\":\"BNBUSDT\",\"quantity\":0.035,\"price\":544.02,\"stopprice\":544.29}}}",
        "payloadType": "json",
        "x": 1350,
        "y": 600,
        "wires": [
            [
                "84948af1aba39a62"
            ]
        ]
    },
    {
        "id": "84948af1aba39a62",
        "type": "redis-out",
        "z": "568b629767512beb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1590,
        "y": 600,
        "wires": []
    },
    {
        "id": "41ff76b137e42b28",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "Test task2",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"task\":{\"bot_id\":\"testid2\",\"cmd\":\"sell_on_binance\",\"params\":{\"pair\":\"BNBUSDT\",\"quantity\":0.035,\"price\":544.02,\"stopprice\":544.29}}}",
        "payloadType": "json",
        "x": 1350,
        "y": 680,
        "wires": [
            [
                "cdec4e2f30362af6"
            ]
        ]
    },
    {
        "id": "cdec4e2f30362af6",
        "type": "redis-out",
        "z": "568b629767512beb",
        "server": "a0efbb89.5e42d8",
        "command": "rpush",
        "name": "",
        "topic": "new_tasks",
        "obj": true,
        "x": 1590,
        "y": 680,
        "wires": []
    },
    {
        "id": "7061e722720929e2",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "init test data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1350,
        "y": 240,
        "wires": [
            [
                "cc134211cabcae1d"
            ]
        ]
    },
    {
        "id": "cc134211cabcae1d",
        "type": "function",
        "z": "568b629767512beb",
        "name": "redis.set    testid",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\nlet test_data = {};\ntest_data.id = \"bots:testid:data\";\ntest_data.somearr = [0,1,2];\ntest_data.someobj = {q:[0,1,2], \"bool\":true};\n\n\n// Регистрируем воркера\n(async () => await redis.set(test_data.id, JSON.stringify(test_data)))();\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "760867d2369ea4a1",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "init test data",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1350,
        "y": 300,
        "wires": [
            [
                "0fac8e94e1e2b310"
            ]
        ]
    },
    {
        "id": "0fac8e94e1e2b310",
        "type": "function",
        "z": "568b629767512beb",
        "name": "redis.set   testid2",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\nlet test_data = {};\ntest_data.id = \"bots:testid2:data\";\ntest_data.somearr = [0,1,2];\ntest_data.someobj = {q:[0,1,2], \"bool\":true};\n\n\n// Регистрируем воркера\n(async () => await redis.set(test_data.id, JSON.stringify(test_data)))();\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1540,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "bde84900c30b397d",
        "type": "debug",
        "z": "568b629767512beb",
        "g": "c34bda795978de35",
        "name": "debug 66",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 140,
        "wires": []
    },
    {
        "id": "4fa9d878be1d41c4",
        "type": "function",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "name": "Worker 1: Process Job",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n(async () => {\n    try {\n        // Получаем ID воркера из контекста Flow\n        const workerId = context.flow.get('workerId');\n        // Получаем сообщение\n        let task = msg.payload;\n        // Проверяем, предназначено ли сообщение этому воркеру\n        if (msg.payload.workerId !== workerId) {\n            return; // Если нет, выходим из функции\n        }\n        node.warn('Воркер '+ workerId +' получил задачу');\n\n        // Добавляем startTime и finishTime в taskData\n        const startTime = task.startTime;\n\n        // Создаем финальный объект для отправки\n        const finalData = {\n            startTime: startTime,\n            task: task.task,\n            bot_data: task.bot_data, // Добавляем данные бота\n            workerId: workerId,  // Добавляем workerId\n            bot_id: task.task.bot_id // Добавляем bot_id\n        };\n\n        // Имитация выполнения задачи\n        await new Promise(resolve => setTimeout(resolve, Math.random() * (30 - 10) + 10));\n\n        msg.payload = finalData;\n        msg.topic = \"fjob\";\n\n        node.send(msg);\n    } catch (err) {\n        node.error(\"Ошибка: \" + err);\n        return [null, { error: 'Ошибка ', details: err }];\n    }\n})();",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 620,
        "wires": [
            [
                "386ca7e8c7e67c3b",
                "0e83c0fd6d981286"
            ]
        ]
    },
    {
        "id": "18eb79254fcfcd07",
        "type": "inject",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "name": "Init Worker 1",
        "props": [
            {
                "p": "payload",
                "v": "true",
                "t": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "21af50813565584d"
            ]
        ]
    },
    {
        "id": "65cd5b44329acb2e",
        "type": "redis-in",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "job",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 270,
        "y": 620,
        "wires": [
            [
                "4fa9d878be1d41c4",
                "607b98142d4cc63b"
            ]
        ]
    },
    {
        "id": "21af50813565584d",
        "type": "function",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "name": "Worker 1: Init",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// Используем context.flow для получения ID воркера, если он уже существует, иначе генерируем новый\nconst workerId = context.flow.get('workerId') || 'worker:' + RED.util.generateId();\ncontext.flow.set('workerId', workerId);\n\n// Регистрируем воркера\n(async () => await redis.set(workerId, 1))();\nnode.status({fill:\"green\",shape:\"dot\",text:\"Воркер запущен:\" + workerId});\n\nmsg.workerID = workerId;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "607b98142d4cc63b",
        "type": "debug",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 380,
        "y": 700,
        "wires": []
    },
    {
        "id": "49c40644aa9fa132",
        "type": "redis-out",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 870,
        "y": 620,
        "wires": []
    },
    {
        "id": "386ca7e8c7e67c3b",
        "type": "delay",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "1",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 720,
        "y": 620,
        "wires": [
            [
                "49c40644aa9fa132"
            ]
        ]
    },
    {
        "id": "0e83c0fd6d981286",
        "type": "debug",
        "z": "568b629767512beb",
        "g": "98132085df5d6410",
        "name": "debug 64",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 700,
        "wires": []
    },
    {
        "id": "2a93e7ce.341078",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1480,
        "y": 160,
        "wires": [
            [
                "d89709ef.fd9368"
            ]
        ]
    },
    {
        "id": "d89709ef.fd9368",
        "type": "function",
        "z": "568b629767512beb",
        "name": "redis.info()",
        "func": "let redis = context.global.get('redis');\n\nredis.info().then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})\n\n/*\nredis.call(\"anycmd\").then((data)=>{\n    msg.payload = data\n    node.send(msg);\n})*/",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 160,
        "wires": [
            [
                "f2e9c3a0.8f181"
            ]
        ]
    },
    {
        "id": "f2e9c3a0.8f181",
        "type": "debug",
        "z": "568b629767512beb",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1810,
        "y": 160,
        "wires": []
    },
    {
        "id": "4274a918b99b6efa",
        "type": "redis-instance",
        "z": "568b629767512beb",
        "server": "a0efbb89.5e42d8",
        "name": "",
        "topic": "redis",
        "location": "global",
        "x": 1310,
        "y": 160,
        "wires": []
    },
    {
        "id": "24c489e3cd436036",
        "type": "function",
        "z": "568b629767512beb",
        "name": "getBotDifferences",
        "func": "function getBotDifferences(bot, botStart, ignorePaths = []) {\n    const ignoreSet = new Set(ignorePaths);    // Рекурсивная функция сравнения объектов    \n    function compareObjects(a, b, differences = {}, path = []) {\n        const allKeys = new Set([...Object.keys(a), ...Object.keys(b)]);\n        allKeys.forEach(key => {\n            const currentPath = [...path, key];\n            const pathString = currentPath.join('.');            // Пропускаем игнорируемые пути  \n            if (ignoreSet.has(pathString)) return;\n            const aVal = a[key];\n            const bVal = b[key];\n            // Обработка объектов        \n            if (isObject(aVal) && isObject(bVal)) {\n                const nestedDiff = {};\n                compareObjects(aVal, bVal, nestedDiff, currentPath);\n                if (Object.keys(nestedDiff).length > 0) {\n                    differences[key] = nestedDiff;\n                }\n            }\n            // Обработка массивов   \n            else if (Array.isArray(aVal) && Array.isArray(bVal)) {\n                if (JSON.stringify(aVal) !== JSON.stringify(bVal)) {\n                    differences[key] = { old: bVal, new: aVal };\n                }\n            }\n            // Простые значения     \n            else {\n                if (!isEqual(aVal, bVal)) {\n                    differences[key] = { old: bVal, new: aVal };\n                }\n            }\n        });\n        return differences;\n    }\n    // Проверка является ли значение объектом (не массивом)  \n    function isObject(val) { return val !== null && typeof val === 'object' && !Array.isArray(val); }\n    // Универсальное сравнение значений   \n    function isEqual(a, b) {\n        if (a === b) return true;\n        if (a === undefined || b === undefined) return false;\n        return JSON.stringify(a) === JSON.stringify(b);\n    }\n    return compareObjects(bot, botStart);\n} global.set('getBotDifferences', getBotDifferences);\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7033ba311f97738f",
        "type": "inject",
        "z": "568b629767512beb",
        "name": "init functions",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1350,
        "y": 100,
        "wires": [
            [
                "24c489e3cd436036"
            ]
        ]
    },
    {
        "id": "d27b92e987155970",
        "type": "switch",
        "z": "3f98de411a14795f",
        "name": "task.cmd",
        "property": "payload.task.cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "cmd1",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cmd2",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "cmd3",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 640,
        "y": 860,
        "wires": [
            [
                "6a41476e49de7f14"
            ],
            [
                "ecab19de5ac32361"
            ],
            [
                "c723462dab492859"
            ]
        ]
    },
    {
        "id": "3474898fdfc341d5",
        "type": "switch",
        "z": "3f98de411a14795f",
        "name": "worker_id",
        "property": "payload.worker.worker_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "worker_id",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 480,
        "y": 860,
        "wires": [
            [
                "d27b92e987155970"
            ]
        ]
    },
    {
        "id": "6a41476e49de7f14",
        "type": "function",
        "z": "3f98de411a14795f",
        "name": "cmd1",
        "func": "\n\nmsg.payload.data.onoff = false\n\nmsg.payload.data.updated = new Date().getTime()\n\nmsg.topic = \"fjob\"\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 760,
        "wires": [
            [
                "1d52faf4ab27679d",
                "f38e31a1e61fd462"
            ]
        ]
    },
    {
        "id": "ecab19de5ac32361",
        "type": "function",
        "z": "3f98de411a14795f",
        "name": "cmd2",
        "func": "let redis = context.global.get('redis');\n\nlet startSetKey = \"global_settings:main_puls_delay\";\n\nredis.get(startSetKey).then((startSet) => {\n    msg.payload.data.startSet += JSON.parse(startSet)\n\n    msg.topic = \"fjob\"\n    node.status({ fill: \"green\", shape: \"dot\" });\n    node.send(msg)\n\n}).catch((err) => {\n    node.error(\"Error getting startSet: \" + err);\n});\n\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 820,
        "wires": [
            [
                "441611d3d2dcea4e",
                "13f0a455a01d190d"
            ]
        ]
    },
    {
        "id": "c723462dab492859",
        "type": "function",
        "z": "3f98de411a14795f",
        "name": "cmd3",
        "func": "\n\nmsg.payload.data.onoff = !msg.payload.data.onoff\n\nmsg.payload.data.updated = new Date().getTime()\n\nmsg.topic = \"fjob\"\nnode.status({ fill: \"green\", shape: \"dot\" });\nreturn [msg,msg];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 940,
        "wires": [
            [
                "f805dc1fb48ea48d",
                "b980f98e071e07ea"
            ],
            [
                "83b5684b5d188dfc"
            ]
        ],
        "icon": "node-red/inject.svg"
    },
    {
        "id": "0b6ffdc763204db1",
        "type": "redis-in",
        "z": "3f98de411a14795f",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 230,
        "y": 860,
        "wires": [
            [
                "76370c50d613e5fa"
            ]
        ]
    },
    {
        "id": "1d52faf4ab27679d",
        "type": "debug",
        "z": "3f98de411a14795f",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 760,
        "wires": []
    },
    {
        "id": "f38e31a1e61fd462",
        "type": "redis-out",
        "z": "3f98de411a14795f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 1050,
        "y": 760,
        "wires": []
    },
    {
        "id": "441611d3d2dcea4e",
        "type": "redis-out",
        "z": "3f98de411a14795f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 1030,
        "y": 820,
        "wires": []
    },
    {
        "id": "13f0a455a01d190d",
        "type": "debug",
        "z": "3f98de411a14795f",
        "name": "debug 43",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 820,
        "wires": []
    },
    {
        "id": "f805dc1fb48ea48d",
        "type": "redis-out",
        "z": "3f98de411a14795f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 1070,
        "y": 940,
        "wires": []
    },
    {
        "id": "b980f98e071e07ea",
        "type": "debug",
        "z": "3f98de411a14795f",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 940,
        "wires": []
    },
    {
        "id": "6e5d54647e4db6e6",
        "type": "redis-out",
        "z": "3f98de411a14795f",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "tasks",
        "obj": true,
        "x": 1070,
        "y": 980,
        "wires": []
    },
    {
        "id": "76370c50d613e5fa",
        "type": "debug",
        "z": "3f98de411a14795f",
        "name": "debug 33",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 220,
        "y": 800,
        "wires": []
    },
    {
        "id": "83b5684b5d188dfc",
        "type": "function",
        "z": "3f98de411a14795f",
        "name": "do cmd1",
        "func": "msg.payload = {\n    cmd: \"add\",\n    task:{\n        data: msg.payload.data,\n        cmd: \"cmd1\"\n    }\n    \n}\nmsg.topic = \"tasks\"\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 980,
        "wires": [
            [
                "6e5d54647e4db6e6",
                "69af9d0a35951760"
            ]
        ]
    },
    {
        "id": "69af9d0a35951760",
        "type": "debug",
        "z": "3f98de411a14795f",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 980,
        "wires": []
    },
    {
        "id": "f3987b323a93c5c3",
        "type": "inject",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "name": "Init Worker 2",
        "props": [
            {
                "p": "payload",
                "v": "true",
                "t": "bool"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "bool",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "d2e16916844ef8c6"
            ]
        ]
    },
    {
        "id": "d2e16916844ef8c6",
        "type": "function",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "name": "Worker 2: Init",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n// Используем context.flow для получения ID воркера, если он уже существует, иначе генерируем новый\nconst workerId = context.flow.get('workerId') || 'worker:' + RED.util.generateId();\ncontext.flow.set('workerId', workerId);\n\n// Регистрируем воркера\n(async () => await redis.set(workerId, 1))();\nnode.status({fill:\"green\",shape:\"dot\",text:\"Воркер запущен:\" + workerId});\n\nmsg.workerID = workerId;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "aee5dc394e1301d4",
        "type": "function",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "name": "Worker 2: Process Job",
        "func": "// ==== Настройка ====\nlet redis = context.global.get('redis');\n\n(async () => {\n    try {\n        // Получаем ID воркера из контекста Flow\n        const workerId = context.flow.get('workerId');\n        // Получаем сообщение\n        let task = msg.payload;\n        // Проверяем, предназначено ли сообщение этому воркеру\n        if (msg.payload.workerId !== workerId) {\n            return; // Если нет, выходим из функции\n        }\n        node.warn('Воркер '+ workerId+' получил задачу');\n\n        // Добавляем startTime и finishTime в taskData\n        const startTime = task.startTime;\n\n        // Создаем финальный объект для отправки\n        const finalData = {\n            startTime: startTime,\n            task: task.task,\n            bot_data: task.bot_data, // Добавляем данные бота\n            workerId: workerId,  // Добавляем workerId\n            bot_id: task.task.bot_id // Добавляем bot_id\n        };\n\n        // Имитация выполнения задачи\n        await new Promise(resolve => setTimeout(resolve, Math.random() * (30 - 10) + 10));\n\n        msg.payload = finalData;\n        msg.topic = \"fjob\";\n\n        node.send(msg);\n    } catch (err) {\n        node.error(\"Ошибка : \" + err);\n        return [null, { error: 'Ошибка', details: err }];\n    }\n})();",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 240,
        "wires": [
            [
                "28974da5b4417212",
                "01a180c0b0f2225d"
            ]
        ]
    },
    {
        "id": "94015585f348d9c3",
        "type": "redis-in",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "server": "a0efbb89.5e42d8",
        "command": "subscribe",
        "name": "job",
        "topic": "job",
        "obj": true,
        "timeout": 0,
        "x": 350,
        "y": 240,
        "wires": [
            [
                "606463e04b70cf07",
                "aee5dc394e1301d4"
            ]
        ]
    },
    {
        "id": "606463e04b70cf07",
        "type": "debug",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "name": "debug 53",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 300,
        "wires": []
    },
    {
        "id": "c3283ee72a5a301c",
        "type": "redis-out",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "server": "a0efbb89.5e42d8",
        "command": "publish",
        "name": "",
        "topic": "fjob",
        "obj": true,
        "x": 910,
        "y": 240,
        "wires": []
    },
    {
        "id": "28974da5b4417212",
        "type": "delay",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "name": "",
        "pauseType": "random",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "0",
        "randomLast": "1",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 760,
        "y": 240,
        "wires": [
            [
                "c3283ee72a5a301c"
            ]
        ]
    },
    {
        "id": "01a180c0b0f2225d",
        "type": "debug",
        "z": "3f98de411a14795f",
        "g": "d4c174739de217d4",
        "name": "debug 65",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 300,
        "wires": []
    }
]